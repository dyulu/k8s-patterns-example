
#
# Ingress is not a service type, but a separate Kubernetes resource that sits in front of Services and
# acts as a smart router and entry point to the cluster. It exposes HTTP and HTTPS routes from outside
# the cluster to services within the cluster. Traffic routing is controlled by rules defined on the
# Ingress resources,

# For Ingress to work, the cluster must have one or more Ingress controllers running.
#
# $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.48.1/deploy/static/provider/baremetal/deploy.yaml
#
# $ kubectl get all -n ingress-nginx 
#   NAME                                            READY   STATUS      RESTARTS   AGE
#   pod/ingress-nginx-admission-create-snbxk        0/1     Completed   0          13s
#   pod/ingress-nginx-admission-patch-5rm46         0/1     Completed   1          13s
#   pod/ingress-nginx-controller-59c5977c49-qddch   0/1     Running     0          13s
#   
#   NAME                                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
#   service/ingress-nginx-controller             NodePort    10.107.5.37     <none>        80:30615/TCP,443:30855/TCP   13s
#   service/ingress-nginx-controller-admission   ClusterIP   10.111.30.252   <none>        443/TCP                      13s
#   
#   NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
#   deployment.apps/ingress-nginx-controller   1/1     1            1           13s
#   
#   NAME                                                  DESIRED   CURRENT   READY   AGE
#   replicaset.apps/ingress-nginx-controller-59c5977c49   1         1         1       13s
#   
#   NAME                                       COMPLETIONS   DURATION   AGE
#   job.batch/ingress-nginx-admission-create   1/1           4s         13s
#   job.batch/ingress-nginx-admission-patch    1/1           5s         13s
#
# $ kubectl get all -o wide
#   NAME                      READY   STATUS    RESTARTS   AGE   IP            NODE              NOMINATED NODE   READINESS GATES
#   pod/web-9df6dcfc6-f6xvj   1/1     Running   0          5s    172.17.0.9    my-work-node   <none>           <none>
#   pod/web-9df6dcfc6-qmnqz   1/1     Running   0          5s    172.17.0.11   my-work-node   <none>           <none>
#   pod/web-9df6dcfc6-s6lgk   1/1     Running   0          5s    172.17.0.10   my-work-node   <none>           <none>
#   pod/web-9df6dcfc6-zmjgp   1/1     Running   0          5s    172.17.0.8    my-work-node   <none>           <none>
#   
#   NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE   SELECTOR
#   service/web          ClusterIP   10.104.134.163   <none>        8080/TCP  5s    app=web
#   
#   NAME                  READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR
#   deployment.apps/web   4/4     4            4           6s    web          nginx:latest   app=web
#   
#   NAME                            DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES         SELECTOR
#   replicaset.apps/web-9df6dcfc6   4         4         4       5s    web          nginx:latest   app=web,pod-template-hash=9df6dcfc6
#
# $ kubectl get ingress -o wide
#   NAME   CLASS    HOSTS                 ADDRESS          PORTS   AGE
#   web    <none>   ingress-example.com   10.193.114.235   80      10s
#
# $ kubectl describe ingress web
#   Name:             web
#   Namespace:        default
#   Address:          10.193.114.235
#   Default backend:  default-http-backend:80 (<error: endpoints "default-http-backend" not found>)
#   Rules:
#     Host                 Path  Backends
#     ----                 ----  --------
#     ingress-example.com  
#                          /   web:8080 (172.17.0.10:80,172.17.0.11:80,172.17.0.8:80 + 1 more...)
#   Annotations:           <none>
#   Events:
#     Type    Reason  Age                From                      Message
#     ----    ------  ----               ----                      -------
#     Normal  Sync    39m (x2 over 39m)  nginx-ingress-controller  Scheduled for sync
#
# Append "10.193.114.235 ingress-example.com" to /etc/hosts
# curl http://ingress-example.com:30615       # service/ingress-nginx-controller is on NodePort 80:30615 in this case
#

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 4
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - image: nginx:latest
        imagePullPolicy: IfNotPresent
        name: web
        ports:
        - containerPort: 80       # nginx service port
          protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  selector:                 # Default type: ClusterIP; accessible only from within the Kubernetes cluster
    app: web                # Selector matching Pod labels
  ports:
  - port: 8080              # Port over which this Service can be contacted
    protocol: TCP
    targetPort: 80          # Port on which the Pods are listening

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web
spec:
  rules:
    - host: ingress-example.com # Need to append the following to /etc/hosts: <ip_addr> ingress-example.com
      http:
        paths:
        - path: /
          pathType: Prefix      # ImplementationSpecific, Exact, Prefix
          backend:
            service:
              name: web
              port:
                number: 8080

